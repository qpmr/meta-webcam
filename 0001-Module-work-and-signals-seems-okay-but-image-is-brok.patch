From ed197e85f3100077cd188e10ba5e0f91f04e3d9c Mon Sep 17 00:00:00 2001
From: Ilja Byckevich <iljabyckevich@gmail.com>
Date: Tue, 7 Feb 2023 20:26:14 +0300
Subject: [PATCH] Module work and signals seems okay, but image is broken

---
 .../dts/allwinner/sun50i-a64-pine64-plus.dts  | 77 ++++++++++++++++++-
 drivers/media/i2c/Kconfig                     |  1 +
 drivers/media/i2c/ov2640.c                    | 28 +++++--
 drivers/media/i2c/ov5640.c                    | 30 ++++++--
 .../platform/sunxi/sun6i-csi/sun6i_csi.c      |  8 +-
 .../platform/sunxi/sun6i-csi/sun6i_video.c    |  6 +-
 drivers/media/v4l2-core/v4l2-compat-ioctl32.c |  1 +
 drivers/media/v4l2-core/v4l2-dev.c            |  2 +
 8 files changed, 135 insertions(+), 18 deletions(-)

diff --git a/arch/arm64/boot/dts/allwinner/sun50i-a64-pine64-plus.dts b/arch/arm64/boot/dts/allwinner/sun50i-a64-pine64-plus.dts
index b54099b65..839428b71 100644
--- a/arch/arm64/boot/dts/allwinner/sun50i-a64-pine64-plus.dts
+++ b/arch/arm64/boot/dts/allwinner/sun50i-a64-pine64-plus.dts
@@ -7,7 +7,67 @@ / {
 	model = "Pine64+";
 	compatible = "pine64,pine64-plus", "allwinner,sun50i-a64";
 
-	/* TODO: Camera, touchscreen, etc. */
+	i2c {
+		compatible = "i2c-gpio";
+		sda-gpios = <&pio 4 13 GPIO_ACTIVE_HIGH>;
+		scl-gpios = <&pio 4 12 GPIO_ACTIVE_HIGH>;
+		i2c-gpio,delay-us = <5>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ov2640: camera@30 {
+			compatible = "ovti,ov2640";
+			#clock-cells = <0>;
+			reg = <0x30>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&csi_mclk_pin>;
+			//clocks = <&ccu>;
+			//clock-names = "xvclk";
+			clocks = <&ccu CLK_CSI_MCLK>;
+			clock-names = "xvclk";
+			//assigned-clocks = <&ccu>;
+			//assigned-clock-rates = <24000000>;
+
+			AVDD-supply = <&reg_aldo1>;
+			DOVDD-supply = <&reg_dldo3>;
+			DVDD-supply = <&reg_eldo3>;
+
+			resetb-gpios = <&pio 4 14 GPIO_ACTIVE_LOW>; /* CSI-RST-R: PE14 */
+			pwdn-gpios = <&pio 4 15 GPIO_ACTIVE_HIGH>; /* CSI-STBY-R: PE15 */
+
+			port {
+				ov2640_ep: endpoint {
+					remote-endpoint = <&csi_ep>;
+					bus-width = <8>;
+					hsync-active = <1>; /* Active high */
+					vsync-active = <0>; /* Active low */
+					data-active = <1>;  /* Active high */
+					pclk-sample = <1>;  /* Rising */
+				};
+			};
+		};
+	};
+
+	/* TODO: touchscreen, etc. */
+};
+
+&reg_aldo1 {
+	regulator-always-on;
+	regulator-min-microvolt = <3300000>;
+	regulator-max-microvolt = <3300000>;
+	regulator-name = "avdd-csi";
+};
+
+&reg_dldo3 {
+	regulator-min-microvolt = <3300000>;
+	regulator-max-microvolt = <3300000>;
+	regulator-name = "dovdd-csi";
+};
+
+&reg_eldo3 {
+	regulator-min-microvolt = <1800000>;
+	regulator-max-microvolt = <1800000>;
+	regulator-name = "dvdd-csi";
 };
 
 &emac {
@@ -33,3 +93,18 @@ &reg_dc1sw {
 	 */
 	regulator-enable-ramp-delay = <100000>;
 };
+
+&csi {
+	status = "okay";
+
+	port {
+		csi_ep: endpoint {
+			remote-endpoint = <&ov2640_ep>;
+			bus-width = <8>;
+			hsync-active = <1>; /* Active high */
+			vsync-active = <0>; /* Active low */
+			data-active = <1>;  /* Active high */
+			pclk-sample = <1>;  /* Rising */
+		};
+	};
+};
diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 6157e73ee..c656078d3 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -899,6 +899,7 @@ config VIDEO_OV02A10
 config VIDEO_OV2640
 	tristate "OmniVision OV2640 sensor support"
 	depends on VIDEO_V4L2 && I2C
+	select V4L2_FWNODE
 	help
 	  This is a Video4Linux2 sensor driver for the OmniVision
 	  OV2640 camera.
diff --git a/drivers/media/i2c/ov2640.c b/drivers/media/i2c/ov2640.c
index 4b75da55b..ed2533b51 100644
--- a/drivers/media/i2c/ov2640.c
+++ b/drivers/media/i2c/ov2640.c
@@ -9,7 +9,7 @@
  * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  * Copyright (C) 2006, OmniVision
  */
-
+#define DEBUG 1
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/i2c.h>
@@ -1196,29 +1196,40 @@ static int ov2640_probe(struct i2c_client *client)
 	struct i2c_adapter	*adapter = client->adapter;
 	int			ret;
 
+	printk(KERN_ERR "My err message! %s:%d\n", __func__, __LINE__);
+
 	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
 		dev_err(&adapter->dev,
 			"OV2640: I2C-Adapter doesn't support SMBUS\n");
+		printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 		return -EIO;
 	}
-
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	priv = devm_kzalloc(&client->dev, sizeof(*priv), GFP_KERNEL);
-	if (!priv)
+	printk(KERN_ERR "My err message %s:%d %p !\n", __func__, __LINE__, priv);
+	if (!priv){
+		printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 		return -ENOMEM;
-
+	}
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	if (client->dev.of_node) {
+		printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 		priv->clk = devm_clk_get(&client->dev, "xvclk");
 		if (IS_ERR(priv->clk))
 			return PTR_ERR(priv->clk);
 		ret = clk_prepare_enable(priv->clk);
+		printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 		if (ret)
 			return ret;
 	}
-
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	ret = ov2640_probe_dt(client, priv);
+
+	ret = 0;
+
 	if (ret)
 		goto err_clk;
-
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	priv->win = ov2640_select_win(SVGA_WIDTH, SVGA_HEIGHT);
 	priv->cfmt_code = MEDIA_BUS_FMT_UYVY8_2X8;
 
@@ -1237,6 +1248,7 @@ static int ov2640_probe(struct i2c_client *client)
 			ARRAY_SIZE(ov2640_test_pattern_menu) - 1, 0, 0,
 			ov2640_test_pattern_menu);
 	priv->subdev.ctrl_handler = &priv->hdl;
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	if (priv->hdl.error) {
 		ret = priv->hdl.error;
 		goto err_hdl;
@@ -1248,7 +1260,7 @@ static int ov2640_probe(struct i2c_client *client)
 	if (ret < 0)
 		goto err_hdl;
 #endif
-
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	ret = ov2640_video_probe(client);
 	if (ret < 0)
 		goto err_videoprobe;
@@ -1258,7 +1270,7 @@ static int ov2640_probe(struct i2c_client *client)
 		goto err_videoprobe;
 
 	dev_info(&adapter->dev, "OV2640 Probed\n");
-
+	printk(KERN_ERR "My err message %s:%d\n", __func__, __LINE__);
 	return 0;
 
 err_videoprobe:
diff --git a/drivers/media/i2c/ov5640.c b/drivers/media/i2c/ov5640.c
index db5a19bab..9866dfb34 100644
--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -1289,6 +1289,8 @@ static int ov5640_get_sysclk(struct ov5640_dev *sensor)
 	u8 temp1, temp2;
 	int ret;
 
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	ret = ov5640_read_reg(sensor, OV5640_REG_SC_PLL_CTRL0, &temp1);
 	if (ret)
 		return ret;
@@ -1534,6 +1536,8 @@ static int ov5640_set_virtual_channel(struct ov5640_dev *sensor)
 	u8 temp, channel = virtual_channel;
 	int ret;
 
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	if (channel > 3) {
 		dev_err(&client->dev,
 			"%s: wrong virtual_channel parameter, expected (0..3), got %d\n",
@@ -1596,6 +1600,8 @@ static int ov5640_set_mode_exposure_calc(struct ov5640_dev *sensor,
 	u8 average;
 	int ret;
 
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	if (!mode->reg_data)
 		return -EINVAL;
 
@@ -1748,6 +1754,8 @@ static int ov5640_set_mode_exposure_calc(struct ov5640_dev *sensor,
 static int ov5640_set_mode_direct(struct ov5640_dev *sensor,
 				  const struct ov5640_mode_info *mode)
 {
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	if (!mode->reg_data)
 		return -EINVAL;
 
@@ -2197,6 +2205,8 @@ static int ov5640_try_frame_interval(struct ov5640_dev *sensor,
 	int minfps, maxfps, best_fps, fps;
 	int i;
 
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	minfps = ov5640_framerates[OV5640_15_FPS];
 	maxfps = ov5640_framerates[OV5640_60_FPS];
 
@@ -2235,6 +2245,8 @@ static int ov5640_get_fmt(struct v4l2_subdev *sd,
 	struct ov5640_dev *sensor = to_ov5640_dev(sd);
 	struct v4l2_mbus_framefmt *fmt;
 
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	if (format->pad != 0)
 		return -EINVAL;
 
@@ -2261,7 +2273,7 @@ static int ov5640_try_fmt_internal(struct v4l2_subdev *sd,
 	struct ov5640_dev *sensor = to_ov5640_dev(sd);
 	const struct ov5640_mode_info *mode;
 	int i;
-
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	mode = ov5640_find_mode(sensor, fr, fmt->width, fmt->height, true);
 	if (!mode)
 		return -EINVAL;
@@ -2294,7 +2306,7 @@ static int ov5640_set_fmt(struct v4l2_subdev *sd,
 	const struct ov5640_mode_info *new_mode;
 	struct v4l2_mbus_framefmt *mbus_fmt = &format->format;
 	int ret;
-
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	if (format->pad != 0)
 		return -EINVAL;
 
@@ -2338,7 +2350,7 @@ static int ov5640_set_framefmt(struct ov5640_dev *sensor,
 	int ret = 0;
 	bool is_jpeg = false;
 	u8 fmt, mux;
-
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	switch (format->code) {
 	case MEDIA_BUS_FMT_UYVY8_1X16:
 	case MEDIA_BUS_FMT_UYVY8_2X8:
@@ -2686,7 +2698,7 @@ static int ov5640_s_ctrl(struct v4l2_ctrl *ctrl)
 	struct v4l2_subdev *sd = ctrl_to_sd(ctrl);
 	struct ov5640_dev *sensor = to_ov5640_dev(sd);
 	int ret;
-
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	/* v4l2_ctrl_lock() locks our own mutex */
 
 	/*
@@ -2825,6 +2837,9 @@ static int ov5640_enum_frame_size(struct v4l2_subdev *sd,
 				  struct v4l2_subdev_state *sd_state,
 				  struct v4l2_subdev_frame_size_enum *fse)
 {
+
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	if (fse->pad != 0)
 		return -EINVAL;
 	if (fse->index >= OV5640_NUM_MODES)
@@ -2848,7 +2863,7 @@ static int ov5640_enum_frame_interval(
 	struct ov5640_dev *sensor = to_ov5640_dev(sd);
 	struct v4l2_fract tpf;
 	int ret;
-
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	if (fie->pad != 0)
 		return -EINVAL;
 	if (fie->index >= OV5640_NUM_FRAMERATES)
@@ -2884,7 +2899,7 @@ static int ov5640_s_frame_interval(struct v4l2_subdev *sd,
 	struct ov5640_dev *sensor = to_ov5640_dev(sd);
 	const struct ov5640_mode_info *mode;
 	int frame_rate, ret = 0;
-
+printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	if (fi->pad != 0)
 		return -EINVAL;
 
@@ -2931,6 +2946,7 @@ static int ov5640_enum_mbus_code(struct v4l2_subdev *sd,
 				 struct v4l2_subdev_state *sd_state,
 				 struct v4l2_subdev_mbus_code_enum *code)
 {
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
 	if (code->pad != 0)
 		return -EINVAL;
 	if (code->index >= ARRAY_SIZE(ov5640_formats))
@@ -3050,6 +3066,8 @@ static int ov5640_probe(struct i2c_client *client)
 	u32 rotation;
 	int ret;
 
+	printk(KERN_ERR "TEST!! %d\n", __LINE__);
+
 	sensor = devm_kzalloc(dev, sizeof(*sensor), GFP_KERNEL);
 	if (!sensor)
 		return -ENOMEM;
diff --git a/drivers/media/platform/sunxi/sun6i-csi/sun6i_csi.c b/drivers/media/platform/sunxi/sun6i-csi/sun6i_csi.c
index 27935f1e9..badb52141 100644
--- a/drivers/media/platform/sunxi/sun6i-csi/sun6i_csi.c
+++ b/drivers/media/platform/sunxi/sun6i-csi/sun6i_csi.c
@@ -4,7 +4,7 @@
  * All rights reserved.
  * Author: Yong Deng <yong.deng@magewell.com>
  */
-
+#define DEBUG 1
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/dma-mapping.h>
@@ -221,6 +221,7 @@ static enum csi_input_fmt get_csi_input_format(struct sun6i_csi_dev *sdev,
 	if ((mbus_code & 0xF000) != 0x2000)
 		return CSI_INPUT_FORMAT_RAW;
 
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, pixformat);
 	switch (pixformat) {
 	case V4L2_PIX_FMT_YUYV:
 	case V4L2_PIX_FMT_YVYU:
@@ -231,6 +232,7 @@ static enum csi_input_fmt get_csi_input_format(struct sun6i_csi_dev *sdev,
 		break;
 	}
 
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, CSI_INPUT_FORMAT_YUV422);
 	/* not support YUV420 input format yet */
 	dev_dbg(sdev->dev, "Select YUV422 as default input format of CSI.\n");
 	return CSI_INPUT_FORMAT_YUV422;
@@ -246,6 +248,7 @@ static enum csi_output_fmt get_csi_output_format(struct sun6i_csi_dev *sdev,
 	    || field == V4L2_FIELD_INTERLACED_BT)
 		buf_interlaced = true;
 
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, pixformat);
 	switch (pixformat) {
 	case V4L2_PIX_FMT_SBGGR8:
 	case V4L2_PIX_FMT_SGBRG8:
@@ -299,7 +302,7 @@ static enum csi_output_fmt get_csi_output_format(struct sun6i_csi_dev *sdev,
 		dev_warn(sdev->dev, "Unsupported pixformat: 0x%x\n", pixformat);
 		break;
 	}
-
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, CSI_FIELD_RAW_8);
 	return CSI_FIELD_RAW_8;
 }
 
@@ -310,6 +313,7 @@ static enum csi_input_seq get_csi_input_seq(struct sun6i_csi_dev *sdev,
 	if ((mbus_code & 0xF000) != 0x2000)
 		return 0;
 
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, pixformat);
 	switch (pixformat) {
 	case V4L2_PIX_FMT_HM12:
 	case V4L2_PIX_FMT_NV12:
diff --git a/drivers/media/platform/sunxi/sun6i-csi/sun6i_video.c b/drivers/media/platform/sunxi/sun6i-csi/sun6i_video.c
index 5ba3e29f7..fe22d556c 100644
--- a/drivers/media/platform/sunxi/sun6i-csi/sun6i_video.c
+++ b/drivers/media/platform/sunxi/sun6i-csi/sun6i_video.c
@@ -4,7 +4,7 @@
  * All rights reserved.
  * Author: Yong Deng <yong.deng@magewell.com>
  */
-
+#define DEBUG 1
 #include <linux/of.h>
 
 #include <media/v4l2-device.h>
@@ -157,6 +157,7 @@ static int sun6i_video_start_streaming(struct vb2_queue *vq, unsigned int count)
 	}
 
 	config.pixelformat = video->fmt.fmt.pix.pixelformat;
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, config.pixelformat);
 	config.code = video->mbus_code;
 	config.field = video->fmt.fmt.pix.field;
 	config.width = video->fmt.fmt.pix.width;
@@ -336,6 +337,8 @@ static int vidioc_enum_fmt_vid_cap(struct file *file, void *priv,
 
 	f->pixelformat = supported_pixformats[index];
 
+	printk(KERN_ERR "TEST %s:%d, 0x%X, %d\n", __func__, __LINE__, f->pixelformat, index);
+
 	return 0;
 }
 
@@ -621,6 +624,7 @@ int sun6i_video_init(struct sun6i_video *video, struct sun6i_csi *csi,
 	/* Setup default format */
 	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	fmt.fmt.pix.pixelformat = supported_pixformats[0];
+	printk(KERN_ERR "TEST %s:%d, 0x%X\n", __func__, __LINE__, fmt.fmt.pix.pixelformat);
 	fmt.fmt.pix.width = 1280;
 	fmt.fmt.pix.height = 720;
 	fmt.fmt.pix.field = V4L2_FIELD_NONE;
diff --git a/drivers/media/v4l2-core/v4l2-compat-ioctl32.c b/drivers/media/v4l2-core/v4l2-compat-ioctl32.c
index 80aaf07b1..ab20ea59f 100644
--- a/drivers/media/v4l2-core/v4l2-compat-ioctl32.c
+++ b/drivers/media/v4l2-core/v4l2-compat-ioctl32.c
@@ -1246,6 +1246,7 @@ long v4l2_compat_ioctl32(struct file *file, unsigned int cmd, unsigned long arg)
 	else if (vdev->fops->compat_ioctl32)
 		ret = vdev->fops->compat_ioctl32(file, cmd, arg);
 
+	printk(KERN_ERR "!!!%s: %d", __func__, ret);
 	if (ret == -ENOIOCTLCMD)
 		pr_debug("compat_ioctl32: unknown ioctl '%c', dir=%d, #%d (0x%08x)\n",
 			 _IOC_TYPE(cmd), _IOC_DIR(cmd), _IOC_NR(cmd), cmd);
diff --git a/drivers/media/v4l2-core/v4l2-dev.c b/drivers/media/v4l2-core/v4l2-dev.c
index d03ace324..151312859 100644
--- a/drivers/media/v4l2-core/v4l2-dev.c
+++ b/drivers/media/v4l2-core/v4l2-dev.c
@@ -1104,6 +1104,8 @@ static int __init videodev_init(void)
 	int ret;
 
 	pr_info("Linux video capture interface: v2.00\n");
+	printk(KERN_ERR "My err message");
+
 	ret = register_chrdev_region(dev, VIDEO_NUM_DEVICES, VIDEO_NAME);
 	if (ret < 0) {
 		pr_warn("videodev: unable to get major %d\n",
-- 
2.34.1

